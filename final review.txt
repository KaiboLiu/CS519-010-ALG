CS 519 Final Review Questions
Reference Solutions

The Final (1 hour 50 min) is comprehensive, with a focus on the portion after Midterm.
Special focus on the connections between DP, priority queues, and shortest-path.

There will be a short fill-in-the-blanks question (DP) in the Final, similar to HW8 or HW9.

1. Give a real-life example of "non-constant" priorities,
   i.e., when do you need to call "decrease-key()" as in Dijkstra?

A: 

2. Describe how to implement decrease-key().

A:






3. For the following graphs, decide whether they are
   (1) directed or undirected, (2) dense or sparse, and (3) cyclic or acyclic:

   (a) Facebook
   (b) Twitter
   (c) family
   (d) airline network (V=airports, E=direct_flights)
   (e) a mesh
   (f) courses and prerequisites
   (g) spanning tree

A:








4. Give two real-life examples of topological sort.

A:




5. We covered BFS implementation of topological sort,
   and the topological order is used in bottom-up approaches in DP (Viterbi).
   How to use DFS for topological sort?
   How does it connect to the top-down approach in DP?

A:







6. Can Dijkstra work for all DAGs? Give example(s).












7. What's the time complexity of Dijkstra if you use the following implementations of priority queue?
   (a) heap (does not support decrease_key)
   (b) heapdict (supports decrease_key)
   (c) hash
   (d) unsorted array

A:





Note: (c) is faster than (a-b) for dense graphs, but since big dense graphs are extremely rare in practice,
      the default implementation is either (a) or (b).

8. Dijkstra with integer weights: suppose all edge weights are in {1..W}
   where W is a positive integer but not a const.
   Modify priority queue datastructure to achieve O(VW+E) time. (hint: no heap).

A:




9. Weird shortest path: find the path whose longest edge is the shortest.
   motivation: My car has a small tank, and gas stations are only found in cities.
               To be safe, I don't wanna travel long distance between two cities.

   O(V+E)  (just modify Viterbi)
   O(VlogV + E)   (modify Dijkstra => similar to Prim)  -- not required for final.

   Follow-up: How about the path whose shortest edge is the longest?

A:








10. Which problems can be solved by *both* Viterbi and Dijkstra?

A: 

11. What's the complexity to run Dijkstra for TSP?

A: 




   follow-up:
   Q: for Hamilton-path, the sink node is ({0..(n-1)}, i) for any i.
      for Hamilton-cycle, what's the sink node?
      A: 

12. Given a boolean expression, count the number of parenthesizations that return T.
   e.g.,
   
   input: F + F * T    output: 0. reason: impossible
   input: T + F * T    output: 2. reason: (T+(F*T))   ((T+F)*T)

   O(n^3) or better.

A:





13. Each integer can be represented as the sum of squares, e.g.:
   1 = 1*1      (partition size 1)
   2 = 1*1 + 1*1    (partition size 2)
   4 = 2*2          (partition size 1)
   5 = 2*2 + 1*1    (partition size 2)

   For a given integer N, find the smallest partition (e.g., for N=4, return 1; for N=5, return 2).

   O(n^2) or better.

A:



14. How to get k-best shortest path using Viterbi? (cf. hw10 RNA k-best)
A: 


15. For single-source single-sink shortest paths on DAGs with non-negative weights, 
    which one is faster, Dijkstra or Viterbi?
    
A: 

16. Which of the following are hypergraph problems?
    (a) coins
    (b) RNA structure
    (c) MIS
    (d) TSP
    (e) # of BSTs
    (f) # of bitstrings
    (g) # of boolean expressions that evaluate to T (see problem 12 above)

A: 

follow-ups
Q: which of the above are optimization problems?
A: 

Q: for the non-optimization problems, can you use Dijkstra or Viterbi?
A: 

Q: do you know other famous instances of hypergraph DP problems (those covered by major textbooks)?
A: 

Q: outside of DP, what are some instances of hypergraph structure?
A: 
