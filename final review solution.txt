CS 519 Final Review Questions
Reference Solutions

The Final (1 hour 50 min) is comprehensive, with a focus on the portion after Midterm.
Special focus on the connections between DP, priority queues, and shortest-path.

There will be a short fill-in-the-blanks question (DP) in the Final, similar to HW8 or HW9.

1. Give a real-life example of "non-constant" priorities,
   i.e., when do you need to call "decrease-key()" as in Dijkstra?

A: emergency room: call decreasy-key() when a patient's condition worsens.

2. Describe how to implement decrease-key().

A:
see heapdict.py

decrease-key(v, newkey):
1) look up heapdict and find the position of v, change the key to newkey;
2) continuously pop v in heap using its newkey, until it is larger than its father in heap;
3) when swapping, update the position of two nodes in heapdict.

3. For the following graphs, decide whether they are
   (1) directed or undirected, (2) dense or sparse, and (3) cyclic or acyclic:

   (a) Facebook
   (b) Twitter
   (c) family
   (d) airline network (V=airports, E=direct_flights)
   (e) a mesh
   (f) courses and prerequisites
   (g) spanning tree

A:
(a) undirected sparse graph; cyclic
(b) directed sparse graph; cyclic
(c) undirected dense graph; cyclic
(d) undirected sparse graph; cyclic
(e) undirected sparse graph; cyclic
(f) directed sparse graph; acyclic
(g) undirected sparse graph; acyclic

4. Give two real-life examples of topological sort.

A:
(a) dressing up;
(b) cooking.
(c) taking courses w.r.t. prerequisites.

5. We covered BFS implementation of topological sort,
   and the topological order is used in bottom-up approaches in DP (Viterbi).
   How to use DFS for topological sort?
   How does it connect to the top-down approach in DP?

A:
Run DFS from the sink node (goal subproblem) using the reverse direction of each edge.
Note: if there is no specific sink node, you can either create a dummy sink node, or start from any node.
When a node is finished (turns black), append it to the topological order.

If you attempt to visit a gray node (still active in the stack) that is not your father => cyclic.


6. Can Dijkstra work for all DAGs? Give example(s).

No. Only works with non-negative weights.

Counter example:

V = {S, V_1, T};
E = {
  S -> V_1: 3
  S -> T: 2
  V_1 -> T: -2
}

7. What's the time complexity of Dijkstra if you use the following implementations of priority queue?
   (a) heap (does not support decrease_key)
   (b) heapdict (supports decrease_key)
   (c) hash
   (d) unsorted array

A:
(a) (V+E) log E
(b) (V+E) log V
(c) V^2 + E
(d) V^2 + EV

Note: (c) is faster than (a-b) for dense graphs, but since big dense graphs are extremely rare in practice,
      the default implementation is either (a) or (b).

8. Dijkstra with integer weights: suppose all edge weights are in {1..W}
   where W is a positive integer but not a const.
   Modify priority queue datastructure to achieve O(VW+E) time. (hint: no heap).

A:
Similar to bucket-sort, your priority queue is actually (V-1)W+1 buckets (0, 1, ..., (V-1)W). 
Vertex with key k is in the bucket k. 
Scan these buckets from left to right, and pop one vertex from the first non-empty bucket.

9. Weird shortest path: find the path whose longest edge is the shortest.
   motivation: My car has a small tank, and gas stations are only found in cities.
               To be safe, I don't wanna travel long distance between two cities.

   O(V+E)  (just modify Viterbi)
   O(VlogV + E)   (modify Dijkstra => similar to Prim)  -- not required for final.

   Follow-up: How about the path whose shortest edge is the longest?

A:
O(V+E): change two operators (max, sum) to (min, max).
O(VlogV+E): change the key of node v from "(shortest) distance from source to node v"
                                       to "(shortest) longest edge from source to node v".

For "whose shortest edge is the longest":
Viterbi: change to (max, min)
Dijkstra: change the edge weight e_ij to max_e - e_ij, then the question is same as "longest edge is the shortest". -- not required for final.

10. Which problems can be solved by *both* Viterbi and Dijkstra?

A: coins, TSP, and many many others that you haven't seen.

11. What's the complexity to run Dijkstra for TSP?

A: recall the induced graph: V=2^n n, E=2^n n^2.
   so Dijkstra runs in time (V+E)lgV = 2^n n^2 lg (2^n n) = 2^n n^3.
   but in practice on some graphs this might be faster than Viterbi (see HW9's last testcase)
   since Dijkstra can stop early when the sink node is popped.

   follow-up:
   Q: for Hamilton-path, the sink node is ({0..(n-1)}, i) for any i.
      for Hamilton-cycle, what's the sink node?
      A: see my TSP code's Dijkstra function.

12. Given a boolean expression, count the number of parenthesizations that return T.
   e.g.,
   
   input: F + F * T    output: 0. reason: impossible
   input: T + F * T    output: 2. reason: (T+(F*T))   ((T+F)*T)

   O(n^3) or better.

A:
Use the gaps between two T/F as index, from 0 to n.

true[i][i+1] = 1 if e[i] is T else 0
false[i][i+1] = 1 if e[i] is F else 0

true[i][j] =
sum(
true[i][k] * true[k][j], if o[k] is +;
true[i][k] * true[k][j] + true[i][k] * false[k][j] + false[i][k] * true[k][j], if o[k] is *;
) for i<k<j

false[i][j] =
sum(
true[i][k] * false[k][j] + false[i][k] * true[k][j] + false[i][k] * false[k][j], if o[k] is +;
false[i][k] * false[k][j], if o[k] is *;
} for i<k<j

goal: true[0][n]
O(n^3) time.

note: true[i][j]+false[i][j] = Catalan[j-i].

13. Each integer can be represented as the sum of squares, e.g.:
   1 = 1*1      (partition size 1)
   2 = 1*1 + 1*1    (partition size 2)
   4 = 2*2          (partition size 1)
   5 = 2*2 + 1*1    (partition size 2)

   For a given integer N, find the smallest partition (e.g., for N=4, return 1; for N=5, return 2).

   O(n^2) or better.

A:
opt[n] = 
{
1, if n is a square number;
opt[n-k*k]+1, for 1<=k<sqrt(n)
}

the time complexity is smaller than O(n^1.5) (H_n^(-0.5), H is the generalized harmonic number)

14. How to get k-best shortest path using Viterbi? (cf. hw10 RNA k-best)
A: each vertex stores k-best shortest paths from the source.
   backward update becomes merging many sorted lists, but only need top k out of them.
   time: O(E + V k log k).

   Note: this is not the fastest, but very easy to implement.
     for a faster algorithm, see Huang and Chiang (2005) Algorithm 3.

15. For single-source single-sink shortest paths on DAGs with non-negative weights, 
    which one is faster, Dijkstra or Viterbi?
    
A: first observe that both are applicable here.
   in the worst case, Dijkstra is O((V+E)logV) while Viterbi is O(V+E) so the latter is faster.
   but in practice, the sink is often popped quite early, which means Dijkstra can finish without
   computing shortest-paths for _all_ vertices.    
   so it all depends on the rank of sink among all vertices in terms of distance from source.

   Examples of shortest-paths on DAGs with non-negative weights include many (but not all) graph-structured DP problems, such as TSP or coins. You can chooose either Dijkstra or Viterbi for these problems.
   However, LIS, knapsacks, MIS, etc. are not in the above category because they are "longest-path" rather than "shortest path". These problems can be solved by Viterbi but not Dijkstra. 
   A more "correct" or generalizable notion of "non-negativity" in Dijkstra can be phrased as: your score should get _worse_ as you go. e.g., shortest path: the more you travel, the further you are away from the source. Not true in LIS!
   On the other hand, shortest-path on a (typical) road network can be solved by Dijkstra, but not Viterbi, since the graph is undirected (and cyclic).

16. Which of the following are hypergraph problems?
    (a) coins
    (b) RNA structure
    (c) MIS
    (d) TSP
    (e) # of BSTs
    (f) # of bitstrings
    (g) # of boolean expressions that evaluate to T (see problem 12 above)

A: (b) (e) (g)

follow-ups
Q: which of the above are optimization problems?
A: trivial: (a-d).

Q: for the non-optimization problems, can you use Dijkstra or Viterbi?
A: only Viterbi works for non-optimization (e.g., counting/sum/avg) problems.
   Dijkstra is fundamentally "best-first" so you have to define "best" first.

Q: do you know other famous instances of hypergraph DP problems (those covered by major textbooks)?
A: matrix-chain multiplication, optimal BST, optimal triangulation, context-free parsing, and many many others.
   some textbooks (such as KT) call these problems "DP over intervals", i.e., the subproblems have shape [i,j],
   but this notion does not capture the essense of the structure and does not even cover "# of BSTs".

Q: outside of DP, what are some instances of hypergraph structure?
A: in divide-n-conquer: quicksort, mergesort (two sided subproblems, i.e., real recursion).
   but not quickselect or binary search (one sided subproblem, i.e., tail recursion).

   the only difference between quicksort/mergesort and RNA is the lack of *overlapping* subproblems.
