CS 519-005, Algorithms (MS/MEng-level), Winter 2018
HW5 - DP (part 1: simple)

HWs 5-7 are all on DPs.

Due Monday Feb 12, 11:59pm.
No late submission will be accepted.

Need to submit report.txt, mis.py, bsts.py, bitstrings.py.
mis.py will be graded for correctness (1%).

Textbooks for References:
[1] CLRS Ch. 15
[2] KT Ch. 6, freely available online (strongly recommended!):
    http://www.aw-bc.com/info/kleinberg/assets/downloads/ch6.pdf

[UPDATE] hint: among the three coding questions, p3 is the easiest, and p1 is similar to p3.
     you'll realize that both are very similar to p0 (fibonacci).
     p2 is slightly different from these, but also very easy.

0. Is Fibonacci REALLY O(n)?
   Hint: f(n) itself grows exponentially.       
   A: The running time is O(n), but the number grows exponentially. 
      In python, the compiler needs to expand the space for larger and larger number. Actually, f(n)=[g^n-(1-g)^n]/2, where g is golden ratio.

1. [WILL BE GRADED]
   Maximum Weighted Independent Set 
   [HINT] independent set is a set where no two numbers are neighbors in the original list.
      see also https://en.wikipedia.org/wiki/Independent_set_(graph_theory)

   What's the complexity?
   A: top-down takes O(n) complexity, but a little slower than bottom-up, because its recursions need to create spaces for stacks, 
      bottom-up takes O(n) complexity.
      My best runtime is based on the bottom-up algorithm only, at which time I haven't finished the top-dowon version.
      It seems no way to make top-down faster than bottom-up, so no matter how many times I submit both versions, I got slightly slower runtime, which would not be updated as my final submission. 
      Just clearify that I tested both version, 
      - my max_wis2 takes 0.008 s
      - my max_wis takes 0.006 s

   Filename: mis.py
   Submitted


2. Number of n-node BSTs

   What's the complexity of this DP?
   A: DP is O(n^2).
      However, it can be simplified as binomial coefficients C(2n,n)/(n+1), which is O(n).
   
   What's the name of this famous number series?
   A: Catalan numbers
      This series can be used to solve problems such as n-node BSTs, or (2n+1)-node tree with null, or monotonous paths within diagonal in a n*n map. 
   
   Filename: bsts.py
   Submitted

3. Number of bit strings of length n that has

   1) no two consecutive 0s.
   2) two consecutive 0s.

   Filename: bitstrings.py
   Submitted


Debriefing (required!): --------------------------

0. What's your name?
  A: Kaibo Liu
1. Approximately how many hours did you spend on this assignment?
  A: 4 hours.
2. Would you rate it as easy, moderate, or difficult?
  A: easy
3. Did you work on it mostly alone, or mostly with other people?
  A: Absolutely alone.
4. How deeply do you feel you understand the material it covers (0%-100%)? 
  A: 95%
5. Which part(s) of the course you like the most so far?
  A: python implementation with new functions I may not be familiar with.
     Corner cases in every interesting problems.
6. Which part(s) of the course you dislike the most so far?
  A: None.

This section is intended to help us calibrate the homework assignments. 
Your answers to this section will *not* affect your grade; however, skipping it
will certainly do.