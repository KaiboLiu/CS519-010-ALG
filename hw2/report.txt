CS 519-005, Algorithms (MS/MEng-level), Winter 2018
HW2 - Divide-n-conquer: mergesort, number of inversions, longest path

Due on Monday Jan 22, 11:59pm.
No late submission will be accepted.

flip $ /nfs/farm/classes/eecs/winter2018/cs519-010/submit hw2 report.txt msort.py inversions.py longest.py

Need to submit: report.txt, msort.py, inversions.py, longest.py.
longest.py will be graded for correctness (1%).

Textbooks for References:
[1] CLRS 

0. Which of the following sorting algorithms are (or can be made) stable? 
   > A: (a),(b),(e)
   (a) mergesort (Y)
   (b) quicksort with the first element as pivot (Y)
   (c) quicksort with randomized pivot (N)
   (d) selection sort (N)
   (e) insertion sort (Y)
   (f) heap sort --- not covered yet (see CLRS Ch. 6) (N)

1. Implement mergesort.
   
   Filename: msort.py
   > Submitted.
   
2. Calculate the number of inversions in a list.

   Filename: inversions.py
   Must run in O(nlogn) time.
   > Submitted.

3. [WILL BE GRADED] 

   Filename: longest.py
   Must run in O(n) time.
   > Submitted.


Debriefing (required!): --------------------------

0. What's your name?
   > A: Kaibo Liu
1. Approximately how many hours did you spend on this assignment?
   > A: 1.5 hours
2. Would you rate it as easy, moderate, or difficult?
   > A: easy
3. Did you work on it mostly alone, or mostly with other people?
   Note you are encouraged to discuss with your classmates, 
   but each students should submit his/her own code.
   > A: Absolutely alone.
4. How deeply do you feel you understand the material it covers (0%-100%)? 
   > A: 90%
5. Any other comments?
   > A: For the operation of adding two lists a and b to a+b, appending elements in b to a by for loop is the least efficient method.
        I test the time for different operations:
         >> test for list addition a + b:
         >> gengerating size for a, b: 10000000
         >> time: 0.756197929382324, generating lists.
         >> time: 1.733625888824463, append in for loop, (for x in b: a.append(x)).
         >> time: 0.236155986785889, with list add, (a + b).
         >> time: 0.114253997802734, with extend, (a.extend(b)).
         >> time: 0.105237007141113, slice append, (a[len(a):len(a)] = b).


This section is intended to help us calibrate the homework assignments. 
Your answers to this section will *not* affect your grade; however, skipping it
will certainly do.
