CS 519-005, Algorithms (MS/MEng-level), Winter 2018
HW8 - DP (part 3), Graph Algorithms (part 1)

Due on Monday Mar 5, 11:59pm.
No late submission will be accepted.

Include in your submission: report.txt, lis.py, topol.py, viterbi.py.
viterbi.py will be graded for correctness (1%).

Textbooks for References:
[1] CLRS Ch. 15
[2] KT Ch. 6, freely available online (strongly recommended!):
    http://www.cs.princeton.edu/~wayne/kleinberg-tardos/pdf/06DynamicProgrammingII-2x2.pdf
[3] Wikipedia: Longest Increasing Subsequence
[4] my DP tutorial (up to page 16):
    http://web.engr.oregonstate.edu/~huanlian/slides/COLING-tutorial-anim.pdf
[5] DPV Ch. 3, 4.2, 4.4, 4.7, 6 (Dasgupta, Papadimitriou, Vazirani)
    https://www.cs.berkeley.edu/~vazirani/algorithms/chap3.pdf
    https://www.cs.berkeley.edu/~vazirani/algorithms/chap4.pdf
    https://www.cs.berkeley.edu/~vazirani/algorithms/chap6.pdf

Please answer time/space complexities for each problem in report.txt.

(LIS is not discussed in class)

0. (a) Describe a greedy algorithm for LIS and show a counter example.
     A: Scan i=0~n-2, then a nested loop starting from j=i+1, pick the fisrt one(let's say j) that s[j] > s[i], then update i,j <- j,j+1 and continue.
        O(n^2).
        counter example: 'azbcd'
   (b) Describe an exhaustive algorithm for TSP and analyze complexity.
     A: A brute-force algorithm can solve the TSP for sure.
        Examine all possible permutations of cities, and keep the one that is shortest.
        It turns out that there are exactly n! different permutations of the numbers from 0 to n-1. Since we only care about permutations that start with 0, to solve an n-city TSP instance with brute force requires that we look at exactly (n-1)! different permutations.
        O((n-1)!)

1. Longest (Strictly) Increasing Subsequence
   
   Q: What are the time and space complexities?
   A: O(nlogn) time and O(n) space.
   filename: lis.py 
   Submitted

2. Topological Sort

   filename: topol.py 
   submitted

   questions: 
   (a) did you realize that bottom-up implementations of DP use (implicit) topological orderings?
       e.g., what is the topological ordering in your (or my) bottom-up bounded knapsack code?
    A: For loop of weight, then a nested for loop of items and copies. If we have a matrix h*w=items*weight, then the topological order is scan by line and within each line scan from left to right.

   (b) what about top-down implementations? what order do they use to traverse the graph?
    A: In the matrix of items*weight, the top-down implementation traverse the grapgh from bottom-right back to upper-left, not vertical or horizontal, but an oblique arrow back to subproblem.

   (c) does that suggest there is a top-down solution for topological sort as well? 
    A: Yes.

3. [WILL BE GRADED]
   Viterbi Algorithm For Longest Path in DAG (see DPV 4.7, [2], CLRS problem 15-1)
   
   Filename: viterbi.py
   submitted.


Debriefing (required!): --------------------------

0. What's your name?
  A: Kaibo Liu
1. Approximately how many hours did you spend on this assignment?
  A: 2 hours
2. Would you rate it as easy, moderate, or difficult?
  A: Easy.
3. Did you work on it mostly alone, or mostly with other people?
  A: Absolutely alone.
4. How deeply do you feel you understand the material it covers (0%â€“100%)? 
  A: 95% I guess
5. Which part(s) of the course you like the most so far?
  A: python implementation with new functions I may not be familiar with.
     Corner cases in every interesting problems.
6. Which part(s) of the course you dislike the most so far?
  A: None

This section is intended to help us calibrate the homework assignments. 
Your answers to this section will *not* affect your grade; however, skipping it
will certainly do.
