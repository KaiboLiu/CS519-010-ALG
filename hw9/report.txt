CS 519-005, Algorithms (MS/MEng-level), Winter 2018
HW9 - Graph Algorithms (part 2), DP (part 4)

Due Monday March 12, 11:59pm. 
No late submission will be accepted.

PLEASE SET UP AN INTERNAL DEADLINE ON FRIDAY MARCH 9 TO SAVE MORE TIME FOR HW10!

Include in your submission: report.txt, dijkstra.py, tsp.py.
dijkstra.py will be graded for correctness (1%).

Textbooks for References:
[1] CLRS Ch. 22 (graph), Ch. 15 (DP)
[2] my DP tutorial (up to page 16):
    http://web.engr.oregonstate.edu/~huanlian/slides/COLING-tutorial-anim.pdf
[3] DPV Ch. 3, 4.2, 4.4, 4.7, 6 (Dasgupta, Papadimitriou, Vazirani)
    https://www.cs.berkeley.edu/~vazirani/algorithms/chap3.pdf
    https://www.cs.berkeley.edu/~vazirani/algorithms/chap4.pdf
    https://www.cs.berkeley.edu/~vazirani/algorithms/chap6.pdf
[4] KT Ch. 6 (DP)
    http://www.aw-bc.com/info/kleinberg/assets/downloads/ch6.pdf
[5] KT slides: Greedy II (Dijkstra)
    http://www.cs.princeton.edu/~wayne/kleinberg-tardos/
[6] Wikipedia: Traveling Salesman Problem
[7] Wikipedia: Held-Karp Algorithm (1962) for TSP


***Please answer time/space complexities for each problem in report.txt.

1. [WILL BE GRADED]
   Dijkstra (see CLRS 24.3 and DPV 4.4)
 
    A: time O((V+E)logV)
       space:O(V+E)
       I wrote my own decrese-key priority queue with [heap+indexing]

   Filename: dijkstra.py
   submitted


2. Traveling Salesman Problem (TSP).

   >>> tsp(4, [(0,1,1), (0,2,5), (1,2,1), (2,3,2), (1,3,6)])
   (14, [0,1,3,2,0])
   - My result: 0s

   >>> tsp(11, ...)
   (253, [0, 8, 10, 1, 6, 2, 5, 9, 3, 4, 7, 0])
   (Viterbi: 0.0s; Dijkstra: 0.3s)
   - My result: 0.02s

   >>> tsp(16, ...)
   (Viterbi: 2.1s, Dijkstra: 0.9s)
   - My result: 1.5s

    A: 1. subproblem:
            dist[i,V] means the min distance i -> V -> start, V is the bit presantation of city set, setV:: int -> set
       2. recurrence relation:
            dist[i,V] = min { weight[i,k] + dist[k, V-<k>] }, k in V, 
            here, 'V-<k>' means the set V without k, I used bit presentation for V, so V-<k> is V-(1<<k)
       3. time:  (n^2*2^n)
          space: O(n*2^n)
          
   Filename: tsp.py
   submitted

Debriefing (required!): --------------------------


0. What's your name?
  A: Kaibo Liu
1. Approximately how many hours did you spend on this assignment?
  A: 8 hours(4 hours on the DIY decrease-key heap for dijkstra)
2. Would you rate it as easy, moderate, or difficult?
  A: between moderate and difficult.
3. Did you work on it mostly alone, or mostly with other people?
  A: Absolutely alone.
4. How deeply do you feel you understand the material it covers (0%â€“100%)? 
  A: 95% I guess.
5. Which part(s) of the course you like the most so far?
  A: python implementation with new functions I may not be familiar with.
     Corner cases in every interesting problems.
6. Which part(s) of the course you dislike the most so far?
  A: None

This section is intended to help us calibrate the homework assignments. 
Your answers to this section will *not* affect your grade; however, skipping it
will certainly do.
